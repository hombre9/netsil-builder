---
- hosts: all
  gather_facts: False
  become: True
  become_user: root

  vars:
    ansible_user: "{{ lookup('env', 'ANSIBLE_USER') or 'core' }}"
    ansible_python_interpreter: /opt/bin/python
    licenses: "{{ licenses }}"

  roles:
    - { role: coreos-bootstrap, when: distrib == 'coreos' }

- hosts: all

  vars_files:
    - /apps/build/vars/services.yml
    - /apps/build/vars/cluster.yml
    - /apps/build/vars/build.yml

  vars:
    netsil_build_branch: "{{ cluster_vars['netsil_build_branch'] }}"
    netsil_version_number: "{{ cluster_vars['netsil_version_number'] }}"
    netsil_commit_hash: "{{ cluster_vars['netsil_commit_hash'] }}"
    netsil_build_number: "{{ cluster_vars['netsil_build_number'] }}"
    netsil_version_tag: "{{ cluster_vars['netsil_version_tag'] }}"
    # So we can support 3rd party docker repos
    uri_namespace: "{{ lookup('env', 'URI_NAMESPACE') or cluster_vars['uri_namespace'] }}"
    is_private_registry: "{{ cluster_vars['is_private_registry'] }}"
    resource_role: "{{ cluster_vars['resource_role'] }}"
    build_env: "{{ cluster_vars['build_env'] }}"
    build_type: "{{ build_type }}"
    force_pull_image: "{{ cluster_vars['force_pull_image'] }}"
    mesos_master_ip_list: "127.0.0.1"
    ### Start: ansible-specific vars ###
    ansible_user: "{{ lookup('env', 'ANSIBLE_USER') or 'core' }}"
    ansible_python_interpreter: /usr/bin/python
    ### End: ansible-specific vars ###

  gather_facts: True
  become: yes
  become_user: root

  roles:
    - prepare-dcos-master
    - install-dcos-master
    - install-dcos-slave
    - configure-dcos-ui
    - configure-dcos-node
    - configure-dns
    - reset-master-ips
    - template-marathon-apps
    - pull-binaries
    - install-startup-scripts
    - cleanup-dcos-install
    - cleanup-user-data
